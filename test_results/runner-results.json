{
  "results": [
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_error.html",
      "subtests": [
        {
          "name": "Call PresentationRequest() constructor without presentation URL. TypeError Exception expected.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_mixedcontent.https.html",
      "subtests": [
        {
          "name": "Creating a PresentationRequest with an a priori unauthenticated URL in an HTTPS context throws a SecurityError exception.",
          "status": "FAIL",
          "message": "assert_throws: function \"function createPresentation() {\n        var request = new PresentationRequest('http://example.org/presentation.html');\n    }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_mixedcontent_multiple.https.html",
      "subtests": [
        {
          "name": "Creating a PresentationRequest with a set of URLs containing an a priori unauthenticated URL in an HTTPS context throws a SecurityError exception.",
          "status": "FAIL",
          "message": "assert_throws: function \"function createPresentation() {\n        var request = new PresentationRequest([\n          'presentation.html',\n          'http://example.org/presentation.html'\n        ]);\n    }\" did not throw"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_sandboxing_error.html",
      "subtests": [
        {
          "name": "Sandboxing: Creating a PresentationRequest from a nested context fails when allow-presentation is not set",
          "status": "FAIL",
          "message": "assert_equals: Presentation sandboxing did not work as expected. expected \"SecurityError\" but got \"success\""
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_sandboxing_success.html",
      "subtests": [
        {
          "name": "Sandboxing: Creating a PresentationRequest from a nested context succeeds when allow-presentation is set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_success.html",
      "subtests": [
        {
          "name": "Call PresentationRequest constructor with a valid relative presentation URL. No Exception expected.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/getAvailability.html",
      "subtests": [
        {
          "name": "Getting the presentation displays availability information.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/getAvailability_sandboxing_success.html",
      "subtests": [
        {
          "name": "Sandboxing: Retrieving display availability from a nested context succeeds when allow-presentation is set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/idlharness.html",
      "subtests": [
        {
          "name": "Navigator interface: attribute presentation",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of Presentation.prototype expected \"[object PresentationPrototype]\" but got \"[object Presentation]\""
        },
        {
          "name": "Presentation interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation interface: attribute defaultRequest",
          "status": "PASS",
          "message": null
        },
        {
          "name": "Presentation must be primary interface of navigator.presentation",
          "status": "FAIL",
          "message": "assert_equals: navigator.presentation's prototype is not Presentation.prototype expected object \"[object Presentation]\" but got object \"[object Object]\""
        },
        {
          "name": "Stringification of navigator.presentation",
          "status": "FAIL",
          "message": "assert_equals: class string of navigator.presentation expected \"[object Presentation]\" but got \"[object Object]\""
        },
        {
          "name": "Presentation interface: navigator.presentation must inherit property \"defaultRequest\" with the proper type (0)",
          "status": "FAIL",
          "message": "assert_inherits: property \"defaultRequest\" found on object expected in prototype chain"
        },
        {
          "name": "PresentationRequest interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of PresentationRequest.prototype expected \"[object PresentationRequestPrototype]\" but got \"[object PresentationRequest]\""
        },
        {
          "name": "PresentationRequest interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: operation start()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: operation reconnect(DOMString)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: operation getAvailability()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: attribute onconnectionavailable",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest must be primary interface of navigator.presentation.defaultRequest",
          "status": "FAIL",
          "message": "assert_equals: navigator.presentation.defaultRequest's prototype is not PresentationRequest.prototype expected object \"[object PresentationRequest]\" but got object \"[object Object]\""
        },
        {
          "name": "Stringification of navigator.presentation.defaultRequest",
          "status": "FAIL",
          "message": "assert_equals: class string of navigator.presentation.defaultRequest expected \"[object PresentationRequest]\" but got \"[object Object]\""
        },
        {
          "name": "PresentationRequest interface: navigator.presentation.defaultRequest must inherit property \"start\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: navigator.presentation.defaultRequest must inherit property \"reconnect\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: calling reconnect(DOMString) on navigator.presentation.defaultRequest with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: navigator.presentation.defaultRequest must inherit property \"getAvailability\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: navigator.presentation.defaultRequest must inherit property \"onconnectionavailable\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onconnectionavailable\" found on object expected in prototype chain"
        },
        {
          "name": "PresentationRequest must be primary interface of presentation_request",
          "status": "FAIL",
          "message": "assert_equals: presentation_request's prototype is not PresentationRequest.prototype expected object \"[object PresentationRequest]\" but got object \"[object Object]\""
        },
        {
          "name": "Stringification of presentation_request",
          "status": "FAIL",
          "message": "assert_equals: class string of presentation_request expected \"[object PresentationRequest]\" but got \"[object Object]\""
        },
        {
          "name": "PresentationRequest interface: presentation_request must inherit property \"start\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request must inherit property \"reconnect\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: calling reconnect(DOMString) on presentation_request with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request must inherit property \"getAvailability\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request must inherit property \"onconnectionavailable\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onconnectionavailable\" found on object expected in prototype chain"
        },
        {
          "name": "PresentationRequest must be primary interface of presentation_request_urls",
          "status": "FAIL",
          "message": "assert_equals: presentation_request_urls's prototype is not PresentationRequest.prototype expected object \"[object PresentationRequest]\" but got object \"[object Object]\""
        },
        {
          "name": "Stringification of presentation_request_urls",
          "status": "FAIL",
          "message": "assert_equals: class string of presentation_request_urls expected \"[object PresentationRequest]\" but got \"[object Object]\""
        },
        {
          "name": "PresentationRequest interface: presentation_request_urls must inherit property \"start\" with the proper type (0)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request_urls must inherit property \"reconnect\" with the proper type (1)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: calling reconnect(DOMString) on presentation_request_urls with too few arguments must throw TypeError",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request_urls must inherit property \"getAvailability\" with the proper type (2)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationRequest interface: presentation_request_urls must inherit property \"onconnectionavailable\" with the proper type (3)",
          "status": "FAIL",
          "message": "assert_inherits: property \"onconnectionavailable\" found on object expected in prototype chain"
        },
        {
          "name": "PresentationAvailability interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationAvailability interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationAvailability interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationAvailability interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of PresentationAvailability.prototype expected \"[object PresentationAvailabilityPrototype]\" but got \"[object PresentationAvailability]\""
        },
        {
          "name": "PresentationAvailability interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationAvailability interface: attribute value",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationAvailability interface: attribute onchange",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionAvailableEvent interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionAvailableEvent interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionAvailableEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionAvailableEvent interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of PresentationConnectionAvailableEvent.prototype expected \"[object PresentationConnectionAvailableEventPrototype]\" but got \"[object PresentationConnectionAvailableEvent]\""
        },
        {
          "name": "PresentationConnectionAvailableEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionAvailableEvent interface: attribute connection",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of PresentationConnection.prototype expected \"[object PresentationConnectionPrototype]\" but got \"[object PresentationConnection]\""
        },
        {
          "name": "PresentationConnection interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute id",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute url",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute state",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation close()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation terminate()",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute onconnect",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute onclose",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute onterminate",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute binaryType",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: attribute onmessage",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation send(DOMString)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation send(Blob)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation send(ArrayBuffer)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnection interface: operation send(ArrayBufferView)",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface: existence and properties of interface object",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface object length",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface object name",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface: existence and properties of interface prototype object",
          "status": "FAIL",
          "message": "assert_equals: class string of PresentationConnectionCloseEvent.prototype expected \"[object PresentationConnectionCloseEventPrototype]\" but got \"[object PresentationConnectionCloseEvent]\""
        },
        {
          "name": "PresentationConnectionCloseEvent interface: existence and properties of interface prototype object's \"constructor\" property",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface: attribute reason",
          "status": "PASS",
          "message": null
        },
        {
          "name": "PresentationConnectionCloseEvent interface: attribute message",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/reconnectToPresentation_notfound_error.html",
      "subtests": [
        {
          "name": "Calling \"reconnect\" with an unknown presentation ID fails with a NotFoundError exception",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/reconnectToPresentation_sandboxing_success.html",
      "subtests": [
        {
          "name": "Sandboxing: Reconnecting a presentation from a nested context succeeds when allow-presentation is set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_error.html",
      "subtests": [
        {
          "name": "The presentation could not start, because a user gesture is required.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationAvailability_onchange-manual.html",
      "subtests": [
        {
          "name": "Monitoring the list of available presentation displays.",
          "status": "FAIL",
          "message": "assert_true: A simple event is fired. expected true got false"
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationConnection_onclosed-manual.html",
      "subtests": [
        {
          "name": "the onclose is fired and the connection state is closed.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationConnection_onconnected-manual.html",
      "subtests": [
        {
          "name": "the onconnect is fired and the connection state is connected",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationConnection_onterminated-manual.html",
      "subtests": [
        {
          "name": "the onterminate is fired and the connection state is terminated",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/PresentationRequest_onconnectionavailable-manual.html",
      "subtests": [
        {
          "name": "The connectionavailable event was fired successfully.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/defaultRequest_success-manual.html",
      "subtests": [
        {
          "name": "[Optional] Starting a presentation from the browser using a default presentation request.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/reconnectToPresentation_success-manual.html",
      "subtests": [
        {
          "name": "Reconnect to presentation success manual test",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_displaynotallowed-manual.html",
      "subtests": [
        {
          "name": "Calling \"start\" when the user denied permission to use the display returns a Promise rejected with a NotAllowedError exception.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_displaynotfound-manual.html",
      "subtests": [
        {
          "name": "Calling \"start\" when there is no available presentation display returns a Promise rejected with a NotFoundError exception.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_sandboxing_success-manual.html",
      "subtests": [
        {
          "name": "Sandboxing: starting a presentation from a nested context succeeds when allow-presentation is set",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_success-manual.html",
      "subtests": [
        {
          "name": "Checking the chain of events when starting a new presentation",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    },
    {
      "test": "/presentation-api/controlling-ua/startNewPresentation_unsettledpromise-manual.html",
      "subtests": [
        {
          "name": "Calling \"start\" when there is already an unsettled Promise returns a Promise rejected with an OperationError exception.",
          "status": "PASS",
          "message": null
        }
      ],
      "status": "OK",
      "message": null
    }
  ]
}